import pyodbc


# Get connection details from config file
def get_connection_info(file_name: str) -> dict:
    # Initial empty dictionary to store connection details
    connections = {}

    # Open config file to get connection info
    with open(file_name) as f:
        lines = f.readlines()
        for line in lines:
            # remove all white space (space, tab, new line)
            line = ''.join(line.split())

            # get connection info
            connection_param, connection_value = line.split(":")
            connections[connection_param] = connection_value
    return connections

# Find first 10 people in the database based on their lexicographical order
def find_first_on_name(connection: dict, lastName: str):
    # cursor = connection.cursor()
    # sql = "SELECT distinct top 10 transdate,name,stockclose,stockopen,high,low,volume FROM Demo.Stock " \
    #       "WHERE transdate = ? ORDER BY stockclose desc"
    # print("Date\t\tName\tOpening Price\tDaily High\tDaily Low\tClosing Price\tVolume")

    # rows = cursor.execute(sql, datetime.strptime(date, "%Y-%m-%d"))
    # for row in rows:
    #     for item in row:
    #         print("{}\t".format(item), end='')
    #     print("")
    pass

# Create person table
def create_person_table(connection: dict) -> None:
    cursor = connection.cursor()
    create_table = "CREATE TABLE Demo.Person(Name varchar(50) unique, Phone varchar(50), Age int)"
    try:
        cursor.execute(create_table)
        print("Created Demo.Person table successfully.")
        connection.commit()
    except Exception as e:
        print("Error creating person: " + str(e))
        
# Add item to portfolio
def add_portfolio_item(connection, name, purchase_date, price, shares):
    try:
        sql = "INSERT INTO Demo.Portfolio (name,PurchaseDate,PurchasePrice,Shares,DateTimeUpdated) VALUES (?,?,?,?,?)"
        cursor = connection.cursor()
        purchase_date = datetime.strptime(purchase_date, "%Y-%m-%d")
        current_time = datetime.now()
        cursor.execute(sql, name, purchase_date, float(price), float(shares), current_time)
        print("Added new line item for stock: {}.".format(name))
        connection.commit()
    except Exception as e:
        print("Error adding to portfolio: " + str(e))
        
# Task 1: Create Person Table
def task_create_person(connection: dict) -> None:
    print("Create portfolio")
    create_person_table(connection)

# Task 4: Add item to Portfolio table
# Note: Choose stock name using list of stocks generated by Task 2
def task_add_to_person(connection: dict) -> None:
    print("Add to portfolio")
    name = input("Name: ")
    date = input("Date (YYYY-MM-DD): ")
    price = input("Price: ")
    shares = input("Number of shares: ")
    add_person_item(connection, name, date, price, shares)

# Execute task based on user input
def execute_selection(selection, connection):
    if selection == 1:
        find_first_on_name(connection)
    elif selection == 2:
        task_create_person(connection)
        
def run() -> None:
    # Retrieve connection information from configuration file
    connection_detail = get_connection_info("connection.config")

    ip = connection_detail["ip"]
    port = int(connection_detail["port"])
    namespace = connection_detail["namespace"]
    username = connection_detail["username"]
    password = connection_detail["password"]
    driver = "{InterSystems IRIS ODBC35}"
    
    # Create connection to InterSystems IRIS using pyodbc
    connection_string = 'DRIVER={};SERVER={};PORT={};DATABASE={};UID={};PWD={}' \
    .format(driver, ip, port, namespace, username, password)
    connection_pyodbc = pyodbc.connect(connection_string)
    connection_pyodbc.setdecoding(pyodbc.SQL_CHAR, encoding='utf-8')
    connection_pyodbc.setencoding(encoding='utf-8')
    print("Connected to InterSystems IRIS using pyodbc")

    # Starting interactive prompt
    while True:
        print("1. View First 10")
        print("2. Create Person Table")
        print("3. Add Person data")
        # print("4. Delete Person Data")
        print("5. Quit")
        selection = int(input("What would you like to do? "))
        if selection == 5:
            break
        elif selection not in range(1, 6):
            print("Invalid option. Try again!")
            continue
        execute_selection(selection, connection_pyodbc)


if __name__ == '__main__':
    run()
